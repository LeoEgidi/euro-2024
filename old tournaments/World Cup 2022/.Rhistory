"2", "1-0", "0-0",
"1", NA, "0-1", "0-2", "0-0",
"1", "1-0", "0-0", "1-1",
"X", "2", "0-0", "1-0",
"2", "X", "0-0", "1-0",
"X2", "0-0", "1-0", "2",
"X", "2", "2-0",
"X", "1-0", "2-0",
NA, NA, NA, "1-0", "2-0", "3-0",
"1", "1-0", NA, "1-1",
NA, "1-0", "0-0", "1-1",
"1", "1-0", "1-1", NA,
"X", "1-0", "2-0",
NA,
"1", "1-0", "0-0",
"1", "1-0", "2-0", NA,
"2", "1-0", "1-1",
NA, NA, NA,
NA, NA,
NA, NA, "0-1", "1-1", "0-2", "1-0",
NA, "1-0", "0-0", "1-1", "0-1",
"1", "1-0", "2-0",
"X", NA, "0-1", "0-2",
"1-0", NA, "2-0", "1-1",
"secchi",
NA, NA, "1-1", "1-0", "2",
NA,
"2", "1-1", "0-1",
"1-0", "2-0", NA, "X", "2",
"1-0", NA, NA, "2",
NA, "1-0", "2-0", "2",
"1", "1-0", "2-0",
"1", "1-0", "2-0",
NA, NA, "0-0", "1-1", "1-0",
NA, "1-0", "0-0", "1-1",
"1-0", "X", "2-0", "2",
NA, "2", "1-0", "2-0","X",
NA,
"1-0", "2-0",
"1-1", "Altre",
"X", "1-0", "2-0",
"1-0", NA, "2", "1-1",
NA, "1-0", "2-0", "X",
NA,
"Varie",
NA, "Varie",
"Varie",
"X", "Varie"
), # sistemone
giocato1 = c(12, 6, 12,
6, 3,  12,
12, 3, 6,
6, 3, 6,
12,12,
NA, NA, NA,
NA, NA, NA,
6,
NA, NA, NA,
NA,NA,
NA, NA,6,
6, NA, NA,
6,6, NA, NA, NA,
30, NA, NA, NA,
10, 5, NA, NA,
5, 10, 3, NA,
15, 3, NA, NA,
5,10, NA,
5,10, NA,
10, 5, 3, NA, NA,NA,
30,3,3, NA,
10, 5, NA, NA,
15,3,NA, 3,
5, NA, NA,
4,
30, 3, NA,
30, 5, 5, 5,
15, NA, NA,
6, 3,1,
3,3,
3,6,3, NA, NA, NA,
6,1, NA, NA, NA,
30, 2, NA,
3,3,2, NA,
2,2, NA, NA,
10,
2,10, NA, NA, NA,
15,
10, NA, 2,
2,1,1,NA, 2,
2,1,3, NA,
20,3, NA, NA,
30,3,3,
20,3, NA,
20,3, NA, NA, NA,
20,3, NA, NA,
5,3,NA, NA,
40, 5, 3, NA, NA,
20,
3, NA,
2, 20,
5,2,2,
3,7,4,NA,
4,3,NA, NA,
10,
53,
5,40,
8,
NA, 11
),
giocato2 = c(NA, NA, 12, 12, 6,
3, 7,4,
6, 6 , 3, NA,
12, 12,
2,3,3,
3,3,3,
7,
3,3,3,
3,4,
2,2,
NA,
6,3,3,
6,5, 3,3,3,
7, 2,2,2,
NA,5,3,3,
6, NA,3, 3,
NA, 3, 3, 6,
4,6,3,
5,3,2,
NA,NA, NA, 3,3,3,
9, 3,NA,2,
NA, 3,3,3,
9, 3,3, NA,
4, 3, 3,
NA,
8,3,3,
10,3,3, NA,
7,3,3,
NA, NA, NA,
NA, NA,
NA, NA, 3,3, 3,3,
NA, 2, 3,2,3,
10, 3,3,
5, NA, 3,3,
3, NA, 3,3,
12,
NA, NA, 3,3,6,
NA,
8,3,3,
3,2, NA, 2, 1.5,
3,NA, NA,3,
NA, 3,3,3,
8,3,3,
8,3,3,
NA, 3,3,3,3,
NA, 5,3,3,
5,3,3,3,
NA, 3, 8,6,4,
NA,
8,7,
5,15,
4,5,5,
5, NA, 4,5,
NA, 5,5,4,
NA,
24,
NA, 19,
17,
5,15
),
quota =   c(2.25, 10, 1.57,
7, 13, 2.45,
2.7, 5, 6.75,
4, 17, 5.5,
1.4, 1.46,
19, 6, 8,
8.5, 8, 8,
5.5,
6,7,7,
7.5, 6,
6.5, 7.5,
3.4,
3.8, 6.5, 7,
5.7, 3.75, 7, 5.5, 7,
1.8, 7,6,7,
4.3, 6.5,10,7,
3.6, 3.25, 8, 7,
1.93, 7,6.5, 5,
3.75, 4.75,8,
4,6.6,7,
3.5,6.75, 6,6,6.5,10,
2,7,10,7,
2.2, 8.5, 9.5, 7,
2.25, 11, 7.5, 7,
3.75, 6.5, 7.5,
2.5,
2.6, 8,7,
1.57, 4, 5.5, 7,
4.2, 6.5, 7,
3.1, 5, 8.5,
5,17,
8.25, 4.5, 5.5,9, 6.5, 17,
3.9,10,  7.5, 7, 6.5,
1.65, 6.5, 7.5,
2.80,7, 7,7,
6, 7, 6.5, 8.5,
6.5,
8, 1.83, 8,7,4.75,
11.79,
2.62, 7,9,
7,11,8,11, 26,
7, 7,7,7,
1.7, 6.5,5.5, 9,
1.36, 7.5,7,
1.8, 5,7,
2, 10, 11, 7, 10,
1.95, 7,7,7,
5, 10, 6, 15,
2, 9.25, 6, 6.5, 5.25,
2.03,
6, 6.5,
7,7,
6,7,6,
7, 3.5, 4.5, 7,
7,7, 7.5, 4,
5.1,
3,
9,5,
3,
4.75,3
))
vinto1 = df$esito*df$giocato1*df$quota
vinto2 = df$esito*df$giocato2*df$quota
df$vinto1 = vinto1
df$vinto2 = vinto2
par(mfrow=c(1,2))
giocato1<- df$giocato1[!is.na(df$giocato1)]
vinto1 <- df$vinto1[!is.na(df$vinto1)]
plot(cumsum(giocato1), 100*(cumsum(vinto1)-cumsum(giocato1))/cumsum(giocato1),
type ="l", ylab ="% Net gain",
xlab ="Cumulated invested money", ylim=c(-130,130),
main = "Torelli & Co")
abline(a=0, b=0, col="red", lty = 2)
text(x=(cumsum(giocato1))[length(cumsum(giocato1))] -12,
y=(100*(cumsum(vinto1)-cumsum(giocato1))/cumsum(giocato1))[length(cumsum(giocato1))]-8,
paste(round((100*(cumsum(vinto1)-cumsum(giocato1))/cumsum(giocato1))[length(cumsum(giocato1))],1),
"%", sep="") )
giocato2<- df$giocato2[!is.na(df$giocato2)]
vinto2 <- df$vinto2[!is.na(df$vinto2)]
plot(cumsum(giocato2),
100*(cumsum(vinto2)-cumsum(giocato2))/cumsum(giocato2),
type ="l", ylab ="% Net gain",
xlab ="Cumulated invested money", ylim=c(-130,130),
main = "Sistemone")
abline(a=0, b=0, col="red", lty = 2)
text(x=(cumsum(giocato2))[length(cumsum(giocato2))] -10,
y=(100*(cumsum(vinto2)-cumsum(giocato2))/cumsum(giocato2))[length(cumsum(giocato2))]-8,
paste(round((100*(cumsum(vinto2)-cumsum(giocato2))/cumsum(giocato2))[length(cumsum(giocato2))],1), "%", sep="") )
arg <- ((0.539+0.317/2)*(0.193+0.151)+(0.402+0.318/2)*(1-0.193-0.151) ) *(0.573+0.1325)  # argentina
france <- ((0.28+0.318/2)*(0.573+0.1325)+ (0.531+0.258/2)*(1-(0.573+0.1325))   )*(0.505+0.151)  # france
croatia <- ((0.211+0.258/2)*(0.505+0.151)+(0.369+0.315/2)*(1-(0.505+0.151))  )*(0.162+0.1325)  # croatia
morocco <- ( (0.145+0.317/2)*(0.573+0.1325)  +(0.317*0.315/2)*(1-(0.573+0.1325))  )*(0.193+0.151) # morocco
sum_nonnorm <- sum(arg, france, croatia, morocco)
arg/sum_nonnorm
france/sum_nonnorm
croatia/sum_nonnorm
morocco/sum_nonnorm
knitr::knit("semi.Rmd", "semi.R", tangle = TRUE, encoding = "UTF-8")
234*2.7
200*2.7
631/8
180*2.7
170*2.7
40*8.5
45*8.5
50*8.5
170*2.7
180*2.7
14*6
pseudo_R2_totale <- prod(0.512, 0.466, 0.649,
0.292, 0.059, 0.249,
0.282, 0.613, 0.303,
0.312, 0.686, 0.624,
0.509, 0.28, 0.811,
0.748 , 0.369, 0.462,0.243,
0.27, 0.32,0.4,
0.436,0.616,0.119,
0.244, 0.163, 0.435,
0.277,0.712,0.144, 0.413,
0.309, 0.767,0.402,
0.624,0.122, 0.18,
0.658, 0.436,0.26,
0.428, 0.175, 0.646,
0.153, 0.681,0.393,
0.041,
0.471, 0.665, 0.620, 0.632,
0.288, 0.74, 0.27, 0.486,
0.22, 0.264, 0.273, 0.348)^(1/60)
gap_totale <- mean(0.512, 0.466, 0.649,
0.292, 0.059, 0.249,
0.282, 0.613, 0.303,
0.312, 0.686, 0.624,
0.509, 0.28, 0.811,
0.748 , 0.369, 0.462,0.243,
0.27, 0.32,0.4,
0.436,0.616,0.119,
0.244, 0.163, 0.435,
0.277,0.712,0.144, 0.413,
0.309, 0.767,0.402,
0.624,0.122, 0.18,
0.658, 0.436,0.26,
0.428, 0.175, 0.646,
0.153, 0.681,0.393,
0.041,
0.471, 0.665, 0.620, 0.632,
0.288, 0.74, 0.27, 0.486,
0.22, 0.264, 0.273, 0.348)
gap_totale
pseudo_R2_totale <- prod(0.512, 0.466, 0.649,
0.292, 0.059, 0.249,
0.282, 0.613, 0.303,
0.312, 0.686, 0.624,
0.509, 0.28, 0.811,
0.748 , 0.369, 0.462,0.243,
0.27, 0.32,0.4,
0.436,0.616,0.119,
0.244, 0.163, 0.435,
0.277,0.712,0.144, 0.413,
0.309, 0.767,0.402,
0.624,0.122, 0.18,
0.658, 0.436,0.26,
0.428, 0.175, 0.646,
0.153, 0.681,0.393,
0.041,
0.471, 0.665, 0.620, 0.632,
0.288, 0.74, 0.27, 0.486,
0.22, 0.264, 0.273, 0.348)^(1/60)
pseudo_R2_totale
gap_totale <- mean(c(0.512, 0.466, 0.649,
0.292, 0.059, 0.249,
0.282, 0.613, 0.303,
0.312, 0.686, 0.624,
0.509, 0.28, 0.811,
0.748 , 0.369, 0.462,0.243,
0.27, 0.32,0.4,
0.436,0.616,0.119,
0.244, 0.163, 0.435,
0.277,0.712,0.144, 0.413,
0.309, 0.767,0.402,
0.624,0.122, 0.18,
0.658, 0.436,0.26,
0.428, 0.175, 0.646,
0.153, 0.681,0.393,
0.041,
0.471, 0.665, 0.620, 0.632,
0.288, 0.74, 0.27, 0.486,
0.22, 0.264, 0.273, 0.348))
gap_totale
pseudo_R2_totale <- prod(0.512, 0.466, 0.649,
0.292, 0.059, 0.249,
0.282, 0.613, 0.303,
0.312, 0.686, 0.624,
0.509, 0.28, 0.811,
0.748 , 0.369, 0.462,0.243,
0.27, 0.32,0.4,
0.436,0.616,0.119,
0.244, 0.163, 0.435,
0.277,0.712,0.144, 0.413,
0.309, 0.767,0.402,
0.624,0.122, 0.18,
0.658, 0.436,0.26,
0.428, 0.175, 0.646,
0.153, 0.681,0.393,
0.041,
0.471, 0.665, 0.620, 0.632,
0.288, 0.74, 0.27, 0.486,
0.22, 0.264, 0.273, 0.348)^(1/60)
gap_totale <- mean(c(0.512, 0.466, 0.649,
0.292, 0.059, 0.249,
0.282, 0.613, 0.303,
0.312, 0.686, 0.624,
0.509, 0.28, 0.811,
0.748 , 0.369, 0.462,0.243,
0.27, 0.32,0.4,
0.436,0.616,0.119,
0.244, 0.163, 0.435,
0.277,0.712,0.144, 0.413,
0.309, 0.767,0.402,
0.624,0.122, 0.18,
0.658, 0.436,0.26,
0.428, 0.175, 0.646,
0.153, 0.681,0.393,
0.041,
0.471, 0.665, 0.620, 0.632,
0.288, 0.74, 0.27, 0.486,
0.22, 0.264, 0.273, 0.348))
gap_totale
by.h = 0.1
by.psi =  0.02
plot_function <- function (z0, add = FALSE,
levels = NULL,
col = 1){
BF_oS <- function(h, psi){
sqrt(1+h)*exp(-0.5*(h/(1+h))*z0^2)       # eq 1 Pawel & Held 2022
}
BF_oSM <- function(param){
(param[2]+(1-param[2])*(1/BF_oS(param[1], param[2])))^(-1)   # Consonni 31-03 notes
}
# contour plot
#define parameters grid
h <- seq(0,25, by= by.h)   # x-axis
psi <- seq(0, 1, by = by.psi) # y-axis
parvalues <- expand.grid(h, psi)
values <- apply(parvalues, 1, BF_oSM)
values <- matrix(values, nrow=length(h),
ncol=length(psi),
byrow=F)
if (missing(levels)){
levels = pretty(range(values, finite = TRUE), 10)
}else{
levels = levels
}
contour(h, psi , values,
xlab= "Relative sceptical mixture prior variance h",
ylab=expression(psi), cex.lab=1.5,
add = add,
labcex = 1.2,
levels = levels,
labels = paste("1/", round(1/levels), sep=""),
col = col)
#title(substitute(z[0]==z0, list(z0=z0)))
return(values)
}
## 2. Find optimal h and psi
p_value_function <- function(z0){
sigma_0 <- 1
prior_p_val <- function(param){
param[2]*(1-pchisq(z0^2, 1))+
(1-param[2])*(1-pchisq((z0)^2/(1+param[1]), 1))
}
#nlm(prior_p_val, c(0,0))
#optim(c(2,1), prior_p_val )
h <- seq(0,25, by = by.h)   # x-axis
psi <- seq(0, 1, by = by.psi) # y-axis
parvalues <- expand.grid(h, psi)
values <- apply(parvalues, 1, prior_p_val)
values <- matrix(values, nrow=length(h),
ncol=length(psi),
byrow=F)
contour(h, psi , values,
xlab= "h",
labcex = 1.1,
ylab=expression(psi), cex.lab=1.5)
#title(substitute(z[0]==z0, list(z0=z0)))
text(0.2,1, substitute(z[o]==z0, list(z0=z0)), cex =1.5 )
#text(0.2,1.02, ",")
return(values)
}
# Find optimal solutions
gamma = 1/10
xx <- p_value_function(z0 = 3)
yy<- plot_function(z0 = 3, add = TRUE,
levels = gamma, col =2)
text(3, 1, expression(gamma==1/10), cex = 1.5)
points(3.6, 0.39, pch = 4, cex=2)
points(6.8, 0.47, pch =4,cex=2)
points(10.45, 0.47, pch =4, cex=2)
points(14.4, 0.44, pch = 4, cex=2)
points(19.1, 0.402, pch =4, cex=2)
points(23.8, 0.36, pch = 4, cex=2)
points(1.62, 0, pch = 2, cex=2)
library(ggplot2)
library(reshape2)
library(dplyr)
library(bayesplot)
library(lamW)
# Input points
z0 = 3; d=0.83
alpha = 1/10
h = seq(0,25, by = by.h)
g_seq <- seq(0, 9, by = by.h)
seq_val = c()
for (i in 1:length(h)){
prior_p_val_onepar <- function(x){
abs( x*(1-pchisq(z0^2, 1))+
(1-x)*(1-pchisq((z0)^2/(1+h[i]), 1)) - alpha)
}
seq_val[i] <- optimize(prior_p_val_onepar, c(0,1) )$minimum
}
psi_seq <- seq_val[1:length(g_seq)]
bf_os  <- function(z0,d) sqrt(1+g)*exp(-0.5*(g/(1+g))*z0^2)
bf_osm <- function(z0, d, psi) (psi+(1-psi)*(1/bf_os(z0, d)))^(-1)
bf_sa  <- function(z0,d) sqrt(2/(1+g))*exp(-0.5*(z0^2)*((d^2)/(1+g) - 0.5*(1-d)^2 ))
#bf_sma <- function(z0,d) psi*sqrt(2)*exp(-0.5*(z0^2)*(d^2 - 0.5*(1-d)^2 )) + (1-psi)*bf_sa(z0,d)
bf_r <- function(z0, d) sqrt(2)*exp(-0.5*(z0^2)*(d^2-0.5*(1-d)^2))
bf_sma <- function(z0,d,psi) psi*bf_r(z0,d)+(1-psi)*bf_sa(z0,d)
# Find the BF values
xs <- (-((z0)^2)/(gamma)^2)*exp(-z0^2)
g_gamma <- -(z0^2)/lambertWm1(xs)-1
g_gamma
g = g_gamma
point_sa = bf_sa(z0,d)
g = 3.6
point_sma = bf_sma(z0,d, psi_seq[h==g])
# Redefine g
g = g_seq
frame2 <- data.frame(g = g_seq,
bf_os = bf_os(z0,d),
bf_osm = bf_osm(z0,d, psi_seq) ,
bf_sa = bf_sa(z0,d),
bf_sma = bf_sma(z0,d, psi_seq)
)
knitr::knit("final.Rmd", "final.R", tangle = TRUE, encoding = "UTF-8")
